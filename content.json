{"meta":{"title":"zwchao的震惊部","subtitle":"前端狗的日常","description":"南京信息工程大学14级，自学前端中。","author":"晁中伟","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"jQuery 之选择器","slug":"jQuery","date":"2017-05-21T11:13:55.000Z","updated":"2017-05-23T09:45:12.885Z","comments":true,"path":"2017/05/21/jQuery/","link":"","permalink":"http://yoursite.com/2017/05/21/jQuery/","excerpt":"","text":"一、基本选择器1、通用选择器$(&#39;*&#39;) 2、ID选择器$(&#39;#id&#39;)jQuery使用ID查询是最快的，因为jQuery库使用的就是getElementById()函数，它本身就很快。 3、Class选择器$(&#39;.class1.class2......&#39;) 支持连接查询语句 4、元素选择器 $(&#39;div&#39;)$(&#39;div,clearfix&#39;)$(&#39;div,span&#39;) 二、根据层级查找元素适用只需要查找某个元素的子元素可使用这种方法$(‘ul.my-list &gt; li &gt; a’)即选择类名为my-list的ul的第一个子元素li的第一个子元素a标签 | 选择器 | 描述 | css是否支持 | | ————- |:————-:| —–:| | E F | E中的所有F | 是 | | E&gt;F | E中的第一个直接子元素F的所有元素 | 是| | E+F | 在和紧邻E同级的元素之间寻找所有的F | 是 ||E~F|在和E同级的任意元素之间寻找所有的F|是| 三、通过属性来选择元素利用方括号来表示1、$(&#39;a[herf^=&#39;http://&#39;]&#39;)可以选择包含 http:// 开头的选择器 2、$(&#39;a[herf$=&#39;http://&#39;]&#39;)选择包含 http:// 且以 http:// 为结尾的元素 3、$(&#39;a[herf!=&#39;http://&#39;]&#39;)选择具有herf 属性 但herf属性的值不等于 http:// 或者根本不具有herf属性的a元素 4、$(&#39;a[herf*=&#39;http://&#39;]&#39;)选择具有herf属性且属性值包含 http:// 的a元素 5、$(&#39;a[herf|=&#39;http://&#39;]&#39;)选择具有herf属性，且属性值等于 http:// 或者以http:// 开头的a元素 6、$(&#39;a[herf~=&#39;http://&#39;]&#39;)选择具有herf属性，且属性值等于http:// 或者包含http:// 的a元素 7、$(&#39;a[herf^=&#39;http://&#39;][target=&#39;_blank&#39;]&#39;)选择具有herf属性且具有target属性且属性值符合相应规则的a元素 四、过滤器通常以冒号：开头 4.1、位置过滤器根据页面中的位置来选择元素 1、li a:first 返回列表元素中的第一个a标签 2、li a:last 返回列表元素的最后一个a标签 3、li:even 返回偶数索引奇数位置的列表元素。因为：even选择器是按照索引来筛选的，索引从0开始。 4、li:odd 返回奇数索引偶数位置的列表元素，原因同上。 5、li:eq(2) 返回第三个列表元素 6、li:gt(2) 返回第三个列表元素之后的列表元素，不包含第三个列表元素，即位置大于3的列表元素。 7、li :lt(4) 返回前4个列表元素，即位置小于5的列表元素。 注意：位置选择器是按照索引来的，:eq(),:gt(),:lt() 这三个选择器可以传递负数作为索引，代表从最后往前的顺序来查找。 4·2、子过滤器根据父元素内部位置来选择元素 1、 :first-child 匹配上下文中第一个子元素 2、 :last-child 匹配上下文最后一个子元素 3、 :first-of-type 匹配给定类型的第一个子元素 4、 :last-of-type 匹配给定类型的最后一个子元素 5、 :nth-child(n) 匹配第n个元素 索引是从1开始的，注意与位置选择器:eq(n)的区别 6、 :nth-last-child(n) 匹配倒数第几个元素 7、 :nth-of-type(n) 匹配第n个元素或者匹配具有同样元素的第n个元素 8、 :nth-last-of-type(n) 匹配倒数第n个元素或者匹配倒数与父元素具有相同元素的第n个元素 9、 :only-child 只匹配没有兄弟元素的子元素 10、:only-of-type 只匹配没有相同类型的兄弟元素的子元素 4·3 表单过滤器通过表单过滤器可以实时检查控件的状态 1、:checkbox 只选择复选框元素相当于input[type=checkbox] 2、:checked 只选择处于被选中的元素，复选框，单选框，或者下拉框元素 3、:disabled 只选择禁用状态的元素 4、:enabled 只选择启用状态的元素 5、:file 只选择文件input元素相当与input[type=file] 6、:focus 只选择处于聚焦状态的元素 7、:image 只选择图片input元素相当与input[type=image] 8、:input 只选择表单元素(input select textarea button) 9、:password 只选择密码元素相当于input[type=password] 10、:radio 只选择单选元素相当于input[type=radio] 11、:reset 只选择重置按钮相当于 input[type=reset]或者button[type=reset] 12、:selected 只选择选中的列表元素 13、:submit 只选择提交按钮相当于 input[type=submit]或者button[type=submit] 14、:text 只选择文本元素input[type=text]或者没有指定类型的input元素，因为默认是type=text 4·4内容过滤器根据内容来筛选元素，内容包括文本内容和子元素 1、:contains(text) 选择包含特定文本的元素(子元素和文本都会被评估) 2、:empty 选择没有子元素的元素(包含文本元素) 3、:has(seletor) 选择包含至少有一个元素匹配特定选择器的元素 例如，div:has(span) 会选择含有span元素的全部div元素 4、:parent 选择包含至少有一个子节点的元素(子节点是文本或者元素) 4·5其他过滤器1、:animated 只选择动画模式的元素 2、:header 只选择头元素~的元素 3、:hidden 只选择隐藏的元素 4、:lang(language) 只选择采用特定语言的元素 5、:not(selector) 排除选择器选择的元素 6、:root 选择文档的根元素 7、:target 通过文档的URL框架标识来选目标元素 8、:visible 只选择可见的元素 4·6 自定义过滤器通过一个函数来自定义过滤器例如，自定义过滤器来选择元素，这些元素只包含数字字母或者下划线 $.expr[&quot;:&quot;].onlyText=$.expr.createPsedo(function(filterParam){ return function(element,context,isXml){ return element.innerHTML.match(/^\\w+$); } }) ;","categories":[],"tags":[{"name":"jQuery","slug":"jQuery","permalink":"http://yoursite.com/tags/jQuery/"}]},{"title":"Sass基础学习","slug":"Sass基础学习","date":"2017-03-27T06:06:04.000Z","updated":"2017-03-27T07:18:09.264Z","comments":true,"path":"2017/03/27/Sass基础学习/","link":"","permalink":"http://yoursite.com/2017/03/27/Sass基础学习/","excerpt":"","text":"变量操作1.直接操作变量，即变量表达式。2.通过函数 2.1 跟代码块无关的函数，多是自己内置函数，称为functions 2.2 可重用的代码块，称为mixin 通过@include 和 @extend 来调用","categories":[],"tags":[]},{"title":"第一次面试","slug":"第一次面试","date":"2017-03-19T14:03:21.000Z","updated":"2017-03-21T04:33:57.292Z","comments":true,"path":"2017/03/19/第一次面试/","link":"","permalink":"http://yoursite.com/2017/03/19/第一次面试/","excerpt":"","text":"培训机构的套路 本来今天高高兴兴，趁着周末休息休息，没想到突然接到一个电话叫我去面试，想到自己在学校招聘会上投了9份简历，终于有了些声响，百度了叫我去面试的公司，果然不出我所料，就是一家培训机构。但仔细想了想，就算是培训机构，也能锻炼一下自己的面试技巧，顺便了解一下培训机构的套路。于是，大周末的我7点钟爬起来去赶地铁，终于在约定时间前到达了公司，然后就开始面试，刚开始还是比较正常的问答，让我有一种，我是不是错怪了他们，果然聊了10分钟，就开始说我的技能达不到他们的标准，可是你都没笔试我，怎么就说我不合格呢，就算我不合格，我走就是了，你还用实训生来忽悠我，还有什么政府扶持资金之类的bulalalala……也就是我当时闲着无聊，陪你聊，换个人早就拍拍屁股走了。然后，我就觉得，我们学校真是什么公司都放进来招聘的啊，难道都不筛选的吗？还有南京的小型公司很少招前端的啊，全是清一色的java，感觉自己的努力配不上自己的理想，所以还是继续加油把，在前端的路上别回头。","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"记一次博客的诞生","slug":"hello-world","date":"2017-03-15T10:31:06.845Z","updated":"2017-03-15T12:31:36.000Z","comments":true,"path":"2017/03/15/hello-world/","link":"","permalink":"http://yoursite.com/2017/03/15/hello-world/","excerpt":"","text":"命途多舛 第一次建好博客之后，还没来得及在上面写写东西，就因为电脑突然出了故障，系统重做，硬盘全清，而且自己傻到也没有及时把配置文件上传到github，导致我不得不重新再建一次，有了上次的经验，这次建起来，异常的顺利，不像上次那么幸运E一直出Bug，所以这次我打算，把我建博客的过程详细的记录下来，一来，可以整理一下思路，二来，防止以后自己再踩坑（此时，我要吐槽微软自带的输入法，好坑啊，很多词都联想错了）。 Create a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}